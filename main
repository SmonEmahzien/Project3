import os
import struct
import sys
import csv

SIZE = 512
MCHILDREN = 2 * DEGREE
DEGREE = 10
MNUMBER = b'4348PRJ3'
MaxKey = 2 * DEGREE - 1


class BTreeNode:
    def __init__(self, b_id=0, parent_id=0, is_leaf=True):
        self.b_id = b_id
        self.parent_id = parent_id
        self.num_keys = 0
        self.keys = [0] * MaxKey
        self.values = [0] * MaxKey
        self.children = [0] * MCHILDREN
        self.is_leaf = is_leaf
    def to_bytes(self):
        
        data = bytearray()
        data.extend(struct.pack('>q', self.b_id))
        data.extend(struct.pack('>q', self.parent_id))
        data.extend(struct.pack('>q', self.num_keys))
        
        
        for i in range(MaxKey):
            data.extend(struct.pack('>q', self.keys[i]))
        for i in range(MaxKey):
            data.extend(struct.pack('>q', self.values[i]))
            
        
        for i in range(MCHILDREN):
            data.extend(struct.pack('>q', self.children[i]))
            
      
        data.extend(bytes(SIZE - len(data)))
        return bytes(data)

    @classmethod
    def from_bytes(cls, data):
       
        
        
       
        for i in range(MaxKey):
            node.keys[i] = struct.unpack('>q', data[pos:pos+8])[0]
            pos += 8
        for i in range(MaxKey):
            node.values[i] = struct.unpack('>q', data[pos:pos+8])[0]
            pos += 8
            
        node = cls()
        pos = 0
        node.block_id = struct.unpack('>q', data[pos:pos+8])[0]
        pos += 8
        node.parent_id = struct.unpack('>q', data[pos:pos+8])[0]
        pos += 8
        node.num_keys = struct.unpack('>q', data[pos:pos+8])[0]
        pos += 8
        
        for i in range(MCHILDREN):
            node.children[i] = struct.unpack('>q', data[pos:pos+8])[0]
            pos += 8  
        node.is_leaf = all(child == 0 for child in node.children)
        return node
        
class BTreeIndex:
    
        
    def create(self):
        if os.path.exists(self.filename):
            print(f" File {self.filename}  exists")
            return False
            
        
        with open(self.filename, 'wb') as f:
            header = bytearray(SIZE)
            header[0:8] = MNUMBER
           
            header[8:16] = struct.pack('>q', 0)
            header[16:24] = struct.pack('>q', 1)
            f.write(header)
        return True
    def __init__(self, filename):
        self.filename = filename
        self.root_id = 0
        self.next_block_id = 1     
    def open(self):
        if not os.path.exists(self.filename):
            print(f"File {self.filename} does not exist")
            return False
        with open(self.filename, 'rb+') as f:
           
            header = f.read(SIZE)
            if header[0:8] != MNUMBER:
                print(f" File {self.filename} is not a valid index file")
                return False
                
            self.root_id = struct.unpack('>q', header[8:16])[0]
            self.next_block_id = struct.unpack('>q', header[16:24])[0]
        return True
        
    
    def insert_non_full(self, node, key, value):
        i = node.num_keys - 1
        if node.is_leaf:
           
            while i >= 0 and key < node.keys[i]:
                node.keys[i+1] = node.keys[i]
                node.values[i+1] = node.values[i]
                i -= 1
                
            
            node.keys[i+1] = key
            node.values[i+1] = value
            node.num_keys += 1
            self.write_node(node)
            return True
        else:
            
            while i >= 0 and key < node.keys[i]:
                i -= 1
            i += 1
            
            child = self.read_node(node.children[i])
            if child.num_keys == MaxKey:
                self.split_child(node, i)
                if key > node.keys[i]:
                    i += 1
                    child = self.read_node(node.children[i])
                    
            return self.insert_non_full(child, key, value)        
    def read_node(self, block_id):
        if block_id == 0:
            return None
            
        with open(self.filename, 'rb') as f:
            f.seek(block_id * SIZE)
            data = f.read(SIZE)
            return BTreeNode.from_bytes(data)
    def update_header(self):
        with open(self.filename, 'rb+') as f:
            header = bytearray(SIZE)
            header[0:8] = MNUMBER
            header[8:16] = struct.pack('>q', self.root_id)
            header[16:24] = struct.pack('>q', self.next_block_id)
            f.seek(0)
            f.write(header)        
    def write_node(self, node):
        with open(self.filename, 'rb+') as f:
            f.seek(node.block_id * SIZE)
            f.write(node.to_bytes())
            
    def allocate_node(self, parent_id=0, is_leaf=True):
        node = BTreeNode(self.next_block_id, parent_id, is_leaf)
        self.next_block_id += 1
        self.write_node(node)
        self.update_header()
        return node
        
    def insert(self, key, value):
        if not self.open():
            return False
            
        if self.root_id == 0:
            
            root = self.allocate_node(is_leaf=True)
            root.keys[0] = key
            root.values[0] = value
            root.num_keys = 1
            self.write_node(root)
            self.root_id = root.block_id
            self.update_header()
            return True
            
        root = self.read_node(self.root_id)
        if root.num_keys == MaxKey:
            
            new_root = self.allocate_node(is_leaf=False)
            new_root.children[0] = root.block_id
            root.parent_id = new_root.block_id
            self.write_node(root)
            
            self.split_child(new_root, 0)
            self.root_id = new_root.block_id
            self.update_header()
            
           
            return self.insert_non_full(new_root, key, value)
        else:
            return self.insert_non_full(root, key, value)
    
            
    def split_child(self, parent, index):
        
        child = self.read_node(parent.children[index])
        new_child = self.allocate_node(parent.block_id, child.is_leaf)
    
        split_point = DEGREE - 1
        new_child.num_keys = split_point
        
        for i in range(split_point):
            new_child.keys[i] = child.keys[i + DEGREE]
            new_child.values[i] = child.values[i + DEGREE]
            
        if not child.is_leaf:
            for i in range(DEGREE):
                new_child.children[i] = child.children[i + DEGREE]
                
                if new_child.children[i] != 0:
                    grandchild = self.read_node(new_child.children[i])
                    grandchild.parent_id = new_child.block_id
                    self.write_node(grandchild)
                    
        child.num_keys = split_point
        
       
        
            
        parent.keys[index] = child.keys[split_point]
        parent.values[index] = child.values[split_point]
        parent.num_keys += 1
        for i in range(parent.num_keys, index, -1):
            parent.children[i+1] = parent.children[i]
        parent.children[index+1] = new_child.block_id
        
        for i in range(parent.num_keys-1, index-1, -1):
            parent.keys[i+1] = parent.keys[i]
            parent.values[i+1] = parent.values[i]
        
        self.write_node(parent)
        self.write_node(child)
        self.write_node(new_child)
        
    
            
    def traverse(self, node=None, result=None):
        if result is None:
            result = []
            
        if node is None:
            if self.root_id == 0:
                return result
            node = self.read_node(self.root_id)
            
        for i in range(node.num_keys + 1):
            if not node.is_leaf and node.children[i] != 0:
                child = self.read_node(node.children[i])
                self.traverse(child, result)
                
            if i < node.num_keys:
                result.append((node.keys[i], node.values[i]))
                
        return result
        
    def load_csv(self, csv_filename):
        if not os.path.exists(csv_filename):
            print(f" CSV file {csv_filename} does not exist")
            return False
            
        with open(csv_filename, 'r') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) != 2:
                    continue
                try:
                    key = int(row[0])
                    value = int(row[1])
                    self.insert(key, value)
                except ValueError:
                    continue
        return True
        
    def extract_csv(self, output_filename):
        if os.path.exists(output_filename):
            print(f" Output file {output_filename}  exists")
            return False
    def search(self, key):
        if not self.open():
            return None
            
        if self.root_id == 0:
            return None
            
        node = self.read_node(self.root_id)
        while node is not None:
            i = 0
            while i < node.num_keys and key > node.keys[i]:
                i += 1
                
            if i < node.num_keys and key == node.keys[i]:
                return node.values[i]
                
            if node.is_leaf:
                return None
                
            node = self.read_node(node.children[i])        
        pairs = self.traverse()
        with open(output_filename, 'w', newline='') as f:
            writer = csv.writer(f)
            for key, value in pairs:
                writer.writerow([key, value])
        return True

def main():
    if len(sys.argv) < 2:
        print("project3 <command> [args...]")
        return
        
    command = sys.argv[1].lower()
    
    if command == 'create':
        if len(sys.argv) != 3:
            print("project3 create <index_file>")
            return
            
        index = BTreeIndex(sys.argv[2])
        if index.create():
            print(f"Creat new index file {sys.argv[2]}")
            
    elif command in ['insert', 'search', 'print', 'load', 'extract']:
        if len(sys.argv) < 3:
            print(f"Usage: project3 {command} <index_file> [args...]")
            return
            
        index = BTreeIndex(sys.argv[2])
        if not index.open():
            return
            
        if command == 'insert':
            if len(sys.argv) != 5:
                print("project3 insert <index_file> <key> <value>")
                return
                
            try:
                key = int(sys.argv[3])
                value = int(sys.argv[4])
                if index.insert(key, value):
                    print(f"Inserted key {key} with value {value}")
            except ValueError:
                print("  value must be integers")
                
        elif command == 'search':
            if len(sys.argv) != 4:
                print(" project3 search <index_file> <key>")
                return
                
            try:
                key = int(sys.argv[3])
                value = index.search(key)
                if value is not None:
                    print(f" key {key} with  {value}")
                else:
                    print(f" {key} not found")
            except ValueError:
                print("must be an integer")
                
        
                
        elif command == 'loa':
            if len(sys.argv) != 4:
                print("project3 load\ <index_file> <csv_file>")
                return
        elif command == 'print':
            pairs = index.traverse()
            for key, value in pairs:
                print(f"{key}: {value}")        
            if index.load_csv(sys.argv[3]):
                print(f"Loaded data from {sys.argv[3]}")
                
        elif command == 'extract':
            if len(sys.argv) != 4:
                print(" project3 extract <index_file> <csv_file>")
                return
            if index.extract_csv(sys.argv[3]):
                print(f"Extract data to {sys.argv[3]}")
                
    else:
        print(f" {command}")
        

if __name__ == '__main__':
    main()